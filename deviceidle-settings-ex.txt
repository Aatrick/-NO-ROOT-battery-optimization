
LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT; This is the time, after becoming inactive, that we go in to the first light-weight idle mode.
        
IGHT_PRE_IDLE_TIMEOUT; This is amount of time we will wait from the point where we decide we would like to go idle until we actually do, while waiting for jobs and other current activity to finish.

LIGHT_IDLE_TIMEOUT; This is the initial time that we will run in idle maintenance mode.

LIGHT_IDLE_FACTOR; Scaling factor to apply to the light idle mode time each time we complete a cycle.

LIGHT_MAX_IDLE_TIMEOUT; This is the maximum time we will run in idle maintenance mode.

LIGHT_IDLE_MAINTENANCE_MIN_BUDGET; This is the minimum amount of time we want to make available for maintenance mode when lightly idling. That is, we will always have at least this amount of time available maintenance before timing out and cutting off maintenance mode.

LIGHT_IDLE_MAINTENANCE_MAX_BUDGET; This is This is the maximum amount of time we want to make available for maintenance mode when lightly idling.  That is, if the system isn't using up its minimum maintenance budget and this time is being added to the budget reserve, this is the maximum reserve size we will allow to grow and thus the maximum amount of time we will allow for the maintenance window.
  
MIN_LIGHT_MAINTENANCE_TIME; This is the minimum amount of time that we will stay in maintenance mode after a light doze.  We have this minimum to allow various things to respond to switching in to maintenance mode and scheduling their work -- otherwise we may see there is nothing to do (no jobs pending) and go out of maintenance mode immediately.

MIN_DEEP_MAINTENANCE_TIME; This is the minimum amount of time that we will stay in maintenance mode after a full doze.  We have this minimum to allow various things to respond to switching in to maintenance mode and scheduling their work -- otherwise we may see there is nothing to do (no jobs pending) and go out of maintenance mode immediately.
         
INACTIVE_TIMEOUT; This is the time, after becoming inactive, at which we start looking at the motion sensor to determine if the device is being left alone.  We don't do this immediately after going inactive just because we don't want to be continually running the motion sensor whenever the screen is off.
 
SENSING_TIMEOUT; If we don't receive a callback from AnyMotion in this amount of time + {@link #LOCATING_TIMEOUT}, we will change from STATE_SENSING to STATE_INACTIVE, and any AnyMotion callbacks while not in STATE_SENSING will be ignored.

LOCATING_TIMEOUT; This is how long we will wait to try to get a good location fix before going in to idle mode.
         
LOCATION_ACCURACY; The desired maximum accuracy (in meters) we consider the location to be good enough to go on to idle.  We will be trying to get an accuracy fix at least this good or until {@link #LOCATING_TIMEOUT} expires.
         
MOTION_INACTIVE_TIMEOUT; This is the time, after seeing motion, that we wait after becoming inactive from that until we start looking for motion again.
         
IDLE_AFTER_INACTIVE_TIMEOUT; This is the time, after the inactive timeout elapses, that we will wait looking for motion until we truly consider the device to be idle.
         
IDLE_PENDING_TIMEOUT; This is the initial time, after being idle, that we will allow ourself to be back in the IDLE_MAINTENANCE state allowing the system to run normally until we return to idle.

MAX_IDLE_PENDING_TIMEOUT; Maximum pending idle timeout (time spent running) we will be allowed to use.

IDLE_PENDING_FACTOR; Scaling factor to apply to current pending idle timeout each time we cycle through that state.

QUICK_DOZE_DELAY_TIMEOUT; This is amount of time we will wait from the point where we go into STATE_QUICK_DOZE_DELAY until we actually go into STATE_IDLE, while waiting for jobs and other current activity to finish.

IDLE_TIMEOUT; This is the initial time that we want to sit in the idle state before waking up again to return to pending idle and allowing normal work to run.

MAX_IDLE_TIMEOUT; Maximum idle duration we will be allowed to use.

IDLE_FACTOR; Scaling factor to apply to current idle timeout each time we cycle through that state.

MIN_TIME_TO_ALARM; This is the minimum time we will allow until the next upcoming alarm for us to actually go in to idle mode.

MAX_TEMP_APP_WHITELIST_DURATION; Max amount of time to temporarily whitelist an app when it receives a high priority tickle.

MMS_TEMP_APP_WHITELIST_DURATION; Amount of time we would like to whitelist an app that is receiving an MMS.

SMS_TEMP_APP_WHITELIST_DURATION; Amount of time we would like to whitelist an app that is receiving an SMS.

NOTIFICATION_WHITELIST_DURATION; Amount of time we would like to whitelist an app that is handling a {@link android.app.PendingIntent} triggered by a {@link android.app.Notification}.

PRE_IDLE_FACTOR_LONG; Pre idle time factor use to make idle delay longer

PRE_IDLE_FACTOR_SHORT; Pre idle time factor use to make idle delay shorter